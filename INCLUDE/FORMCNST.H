#define NIL     -1
#define ROOT    0
#define FALSE   0
#define TRUE    1
#define OB_NEXT(x)      (((OBJECT2 *)u_object((OBJECT *)tree,x))->ob_next)
#define OB_HEAD(x)      (((OBJECT2 *)u_object((OBJECT *)tree,x))->ob_head)
#define OB_TAIL(x)      (((OBJECT2 *)u_object((OBJECT *)tree,x))->ob_tail)
#define OB_TYPE(x)      (((OBJECT2 *)u_object((OBJECT *)tree,x))->ob_type)
#define OB_FLAGS(x)     (((OBJECT2 *)u_object((OBJECT *)tree,x))->ob_flags)
#define OB_STATE(x)     (((OBJECT2 *)u_object((OBJECT *)tree,x))->ob_state)

#define M1_ENTER        0x0000
#define M1_EXIT         0x0001

#define BS      0x0E00
#define TAB     0x0F00
#define CR      0x1C00
#define KCR     0x7200
#define ESC     0x0100
#define UP      0x4800
#define DOWN    0x5000
#define DEL     0x5300
#define UNDO    0x6100
#define HELP    0x6200

int fn_obj;                 /* Found tabable object     */
int fn_prev;                /* Last EDITABLE obj seen   */
int asc_x2, asc_y2;
Rect asc;
char is_alert, mouse_curs=1;

#define hide_mouse() _graf_mouse( M_OFF, 0L, 0 )
#define show_mouse(a) _graf_mouse( M_ON, 0L, 0 )

        void                            /* If the object is not already */
objc_sel(long tree, int obj);                  /* SELECTED, make it so.*/
        void                            /* If the object is SELECTED,   */
objc_dsel(long tree, int obj);                 /* deselect it.         */
        void                            /* Return the object's GRECT    */
objc_xywh(long tree, int obj, Rect *p);                /* through 'p' */
        int                            /* Find the parent object of    */
get_parent(long tree, int obj);            /* by traversing right until*/
        int
inside(int x, int y, GRECT *pt);      /* determine if x,y is in rectangle*/
        int
rc_intersect(GRECT *p1, GRECT *p2);     /* compute intersection of two GRECTs*/
        void
rc_copy(GRECT *psbox, GRECT *pdbox);  /* copy source to destination rectangle*/
        int
break_x(int *pxy);
        int
break_y(int *pxy);
        int
break_obj(long tree, int obj);                 /* Called once per object to*/
        int                            /* Manages mouse rectangle events */
form_hot(long tree, int hot_obj, int mx, int my, GRECT *rect, int *mode);
        void
do_radio(long tree, int obj, int wait);
int _form_dial( int flag, Rect *small, Rect *big );

/*
static int image[3][64] =
{ 0x0003, 0xC000, 0x0006, 0x6000,
  0x000D, 0xB000, 0x001B, 0xD800,
  0x0037, 0xEC00, 0x006F, 0xF600,
  0x00DE, 0x7B00, 0x01BC, 0x3D80,
  0x037C, 0x3EC0, 0x06F8, 0x1F60,
  0x0DF8, 0x1FB0, 0x1BF8, 0x1FD8,
  0x37F8, 0x1FEC, 0x6FF8, 0x1FF6,
  0xDFFC, 0x3FFB, 0xBFFC, 0x3FFD,
  0xBFFC, 0x3FFD, 0xDFFE, 0x7FFB,
  0x6FFE, 0x7FF6, 0x37FE, 0x7FEC,
  0x1BFF, 0xFFD8, 0x0DFF, 0xFFB0,
  0x06FE, 0x7F60, 0x037C, 0x3EC0,
  0x01BC, 0x3D80, 0x00DE, 0x7B00,
  0x006F, 0xF600, 0x0037, 0xEC00,
  0x001B, 0xD800, 0x000D, 0xB000,
  0x0006, 0x6000, 0x0003, 0xC000,
  0x3FFF, 0xFFFC, 0xC000, 0x0003,
  0x9FFF, 0xFFF9, 0xBFFF, 0xFFFD,
  0xDFF8, 0x3FFB, 0x5FE0, 0x0FFA,
  0x6FC1, 0x07F6, 0x2FC7, 0xC3F4,
  0x37CF, 0xE3EC, 0x17EF, 0xE3E8,
  0x1BFF, 0xC7D8, 0x0BFF, 0x07D0,
  0x0DFE, 0x0FB0, 0x05FE, 0x3FA0,
  0x06FC, 0x7F60, 0x02FC, 0x7F40,
  0x037C, 0x1EC0, 0x017C, 0x1E80,
  0x01BE, 0x3D80, 0x00BF, 0xFD00,
  0x00DF, 0xFB00, 0x005E, 0x7A00,
  0x006C, 0x3600, 0x002C, 0x3400,
  0x0036, 0x6C00, 0x0017, 0xE800,
  0x001B, 0xD800, 0x000B, 0xD000,
  0x000D, 0xB000, 0x0005, 0xA000,
  0x0006, 0x6000, 0x0003, 0xC000,
  0x007F, 0xFE00, 0x00C0, 0x0300,
  0x01BF, 0xFD80, 0x037F, 0xFEC0,
  0x06FF, 0xFF60, 0x0DFE, 0xFFB0,
  0x1BF9, 0x7FD8, 0x37F5, 0x3FEC,
  0x6FF5, 0x5FF6, 0xDFF5, 0x5FFB,
  0xBFE5, 0x5FFD, 0xBFD5, 0x5FFD,
  0xBFD5, 0x5BFD, 0xBFD5, 0x55FD,
  0xBFD5, 0x55FD, 0xBFD7, 0xCDFD,
  0xBFDF, 0xEDFD, 0xBFDF, 0xFBFD,
  0xBFDF, 0xFBFD, 0xBFDF, 0xFBFD,
  0xBFEF, 0xF7FD, 0xBFEF, 0xF7FD,
  0xDFF7, 0xEFFB, 0x6FFB, 0xDFF6,
  0x37FC, 0x3FEC, 0x1BFF, 0xFFD8,
  0x0DFF, 0xFFB0, 0x06FF, 0xFF60,
  0x037F, 0xFEC0, 0x01BF, 0xFD80,
  0x00C0, 0x0300, 0x007F, 0xFE00
};
*/
static int images[3][31*2] = {
  0x0003, 0x0000, 0x0004, 0xC000,
  0x0008, 0x6000, 0x0010, 0x3000,
  0x0020, 0x1800, 0x0043, 0x0C00,
  0x0087, 0x8600, 0x0107, 0x8300,
  0x020F, 0xC180, 0x040F, 0xC0C0,
  0x080F, 0xC060, 0x100F, 0xC030,
  0x200F, 0xC018, 0x4007, 0x800C,
  0x8007, 0x8006, 0x8007, 0x8006,
  0x4003, 0x000E, 0x2003, 0x001C,
  0x1003, 0x0038, 0x0800, 0x0070,
  0x0400, 0x00E0, 0x0203, 0x01C0,
  0x0107, 0x8380, 0x0087, 0x8700,
  0x0043, 0x0E00, 0x0020, 0x1C00,
  0x0010, 0x3800, 0x0008, 0x7000,
  0x0004, 0xE000, 0x0003, 0xC000,
  0x0000, 0x8000,
  0x3FFF, 0xFFFC, 0x4000, 0x0002,
  0x4000, 0x0002, 0x2007, 0xC006,
  0x201F, 0xF006, 0x103E, 0xF80C,
  0x1038, 0x3C0C, 0x0830, 0x1C1C,
  0x0810, 0x1C18, 0x0400, 0x3838,
  0x0400, 0xF830, 0x0201, 0xF070,
  0x0201, 0xC060, 0x0103, 0x80E0,
  0x0103, 0x80C0, 0x0083, 0xE1C0,
  0x0083, 0xE180, 0x0041, 0xC380,
  0x0040, 0x0300, 0x0020, 0x0700,
  0x0021, 0x8600, 0x0013, 0xCE00,
  0x0013, 0xCC00, 0x0009, 0x9C00,
  0x0008, 0x1800, 0x0004, 0x3800,
  0x0004, 0x3000, 0x0002, 0x7000,
  0x0002, 0x6000, 0x0001, 0xE000,
  0x0000, 0xC000,
  0x007F, 0xF800, 0x0080, 0x0600,
  0x0100, 0x0300, 0x0200, 0x0180,
  0x0400, 0x00C0, 0x0800, 0x0060,
  0x1000, 0x0030, 0x2000, 0x0018,
  0x4000, 0x000C, 0x8E7E, 0x63E6,
  0x9F7E, 0xF3F6, 0x9919, 0x9B36,
  0x9819, 0x9B36, 0x9C19, 0x9B36,
  0x8E19, 0x9BE6, 0x8719, 0x9BC6,
  0x8319, 0x9B06, 0x9319, 0x9B06,
  0x9F18, 0xF306, 0x8E18, 0x6306,
  0x8000, 0x0006, 0x4000, 0x000E,
  0x2000, 0x001C, 0x1000, 0x0038,
  0x0800, 0x0070, 0x0400, 0x00E0,
  0x0200, 0x01C0, 0x0100, 0x0380,
  0x0080, 0x0700, 0x007F, 0xFE00,
  0x001F, 0xFC00 },
  masks[3][31*2] = {
  0x0003, 0x0000, 0x0007, 0xC000,
  0x000F, 0xE000, 0x001F, 0xF000,
  0x003F, 0xF800, 0x007F, 0xFC00,
  0x00FF, 0xFE00, 0x01FF, 0xFF00,
  0x03FF, 0xFF80, 0x07FF, 0xFFC0,
  0x0FFF, 0xFFE0, 0x1FFF, 0xFFF0,
  0x3FFF, 0xFFF8, 0x7FFF, 0xFFFC,
  0xFFFF, 0xFFFE, 0xFFFF, 0xFFFE,
  0x7FFF, 0xFFFE, 0x3FFF, 0xFFFC,
  0x1FFF, 0xFFF8, 0x0FFF, 0xFFF0,
  0x07FF, 0xFFE0, 0x03FF, 0xFFC0,
  0x01FF, 0xFF80, 0x00FF, 0xFF00,
  0x007F, 0xFE00, 0x003F, 0xFC00,
  0x001F, 0xF800, 0x000F, 0xF000,
  0x0007, 0xE000, 0x0003, 0xC000,
  0x0000, 0x8000,
  0x3FFF, 0xFFFC, 0x7FFF, 0xFFFE,
  0x7FFF, 0xFFFE, 0x3FFF, 0xFFFE,
  0x3FFF, 0xFFFE, 0x1FFF, 0xFFFC,
  0x1FFF, 0xFFFC, 0x0FFF, 0xFFFC,
  0x0FFF, 0xFFF8, 0x07FF, 0xFFF8,
  0x07FF, 0xFFF0, 0x03FF, 0xFFF0,
  0x03FF, 0xFFE0, 0x01FF, 0xFFE0,
  0x01FF, 0xFFC0, 0x00FF, 0xFFC0,
  0x00FF, 0xFF80, 0x007F, 0xFF80,
  0x007F, 0xFF00, 0x003F, 0xFF00,
  0x003F, 0xFE00, 0x001F, 0xFE00,
  0x001F, 0xFC00, 0x000F, 0xFC00,
  0x000F, 0xF800, 0x0007, 0xF800,
  0x0007, 0xF000, 0x0003, 0xF000,
  0x0003, 0xE000, 0x0001, 0xE000,
  0x0000, 0xC000,
  0x007F, 0xF800, 0x00FF, 0xFE00,
  0x01FF, 0xFF00, 0x03FF, 0xFF80,
  0x07FF, 0xFFC0, 0x0FFF, 0xFFE0,
  0x1FFF, 0xFFF0, 0x3FFF, 0xFFF8,
  0x7FFF, 0xFFFC, 0xFFFF, 0xFFFE,
  0xFFFF, 0xFFFE, 0xFFFF, 0xFFFE,
  0xFFFF, 0xFFFE, 0xFFFF, 0xFFFE,
  0xFFFF, 0xFFFE, 0xFFFF, 0xFFFE,
  0xFFFF, 0xFFFE, 0xFFFF, 0xFFFE,
  0xFFFF, 0xFFFE, 0xFFFF, 0xFFFE,
  0xFFFF, 0xFFFE, 0x7FFF, 0xFFFE,
  0x3FFF, 0xFFFC, 0x1FFF, 0xFFF8,
  0x0FFF, 0xFFF0, 0x07FF, 0xFFE0,
  0x03FF, 0xFFC0, 0x01FF, 0xFF80,
  0x00FF, 0xFF00, 0x007F, 0xFE00,
  0x001F, 0xFC00 };
